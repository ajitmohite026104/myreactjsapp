{"version":3,"sources":["components/SearchComponent.js","components/NavigationBar.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["SearchComponent","state","searchText","handleSubmit","event","preventDefault","console","log","alert","Form","inline","className","onSubmit","this","InputGroup","Prepend","Text","id","icon","faSearch","FormControl","placeholder","aria-label","aria-describedby","value","onChange","setState","target","Button","variant","type","React","Component","NavigationBar","isLoggedIn","props","button","Navbar","Collapse","Nav","NavDropdown","title","faUser","Link","as","NavLink","to","exact","faHistory","faCog","Divider","faSignOutAlt","Brand","bg","expand","faHome","faBookReader","OverlayTrigger","key","placement","overlay","Tooltip","faBell","Footer","rel","href","Home","lazy","About","LoginComponent","GithubUsers","BrowseCourses","History","Profile","Video","LoginCallback","App","Container","fluid","style","backgroundColor","Row","Col","fallback","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3abd514c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass SearchComponent extends React.Component{\r\n    state = {\r\n        searchText: ''\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        console.log(this.state.searchText);\r\n        alert('Thank you for visiting our website, we are creating something great stuff on '+ this.state.searchText);\r\n        //this.props.history.push('./browse')\r\n    };\r\n\r\n    render(){\r\n        return(\r\n            <Form inline className=\"col-md-8\" onSubmit={this.handleSubmit}>\r\n                        {/* <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" /> */}\r\n                <InputGroup className=\"col-md-9\">\r\n                    <InputGroup.Prepend>\r\n                        <InputGroup.Text id=\"basic-addon1\"><FontAwesomeIcon icon={faSearch} /></InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl\r\n                        placeholder=\"Search...\"\r\n                        aria-label=\"Search\"\r\n                        aria-describedby=\"searchText\"\r\n                        value={this.state.searchText}\r\n                        onChange={event => this.setState({ searchText: event.target.value })}\r\n                        className=\"mr-sm-2\"\r\n                    />\r\n                </InputGroup>\r\n                    <Button variant=\"outline-success\" type=\"submit\">Search</Button>\r\n            </Form>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SearchComponent;","import React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport SearchComponent from './SearchComponent';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\nimport { faSignOutAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { faCog } from '@fortawesome/free-solid-svg-icons';\r\nimport { faHistory } from '@fortawesome/free-solid-svg-icons';\r\nimport { faBookReader } from '@fortawesome/free-solid-svg-icons';\r\nimport { faBell } from '@fortawesome/free-solid-svg-icons';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\n\r\nclass NavigationBar extends React.Component {\r\n\r\n    state = {\r\n        isLoggedIn: this.props.isLoggedIn,\r\n    }\r\n\r\n    render() {\r\n        const isLoggedIn = this.state.isLoggedIn;\r\n        let button;\r\n        if(isLoggedIn){\r\n            button = <Navbar.Collapse id=\"basic-navbar-nav\" className=\"float-right\">\r\n            <Nav className=\"mr-auto\">\r\n                <NavDropdown title={<FontAwesomeIcon icon={faUser}/>} id=\"basic-nav-dropdown\">\r\n                    {/* <NavDropdown.Item href=\"/profile\"><Link to=\"/profile\"><FontAwesomeIcon icon={faUser} /> Profile</Link></NavDropdown.Item>\r\n                    <NavDropdown.Item href=\"#action/3.2\"><FontAwesomeIcon icon={faHistory} /> History</NavDropdown.Item>\r\n                    <NavDropdown.Item href=\"#action/3.3\"><FontAwesomeIcon icon={faCog} /> Account Settings</NavDropdown.Item>\r\n                    <NavDropdown.Divider />\r\n                    <NavDropdown.Item href=\"#action/3.4\"><FontAwesomeIcon icon={faSignOutAlt} /> Logout</NavDropdown.Item> */}\r\n                    <Nav.Link as={NavLink} to='/profile' exact><FontAwesomeIcon icon={faUser} /> Profile</Nav.Link>\r\n                    <Nav.Link as={NavLink} to='/history'><FontAwesomeIcon icon={faHistory} /> History</Nav.Link>\r\n                    <Nav.Link as={NavLink} to='/settings'><FontAwesomeIcon icon={faCog} /> Account Settings</Nav.Link>\r\n                    <NavDropdown.Divider />\r\n                    <Nav.Link as={NavLink} to='/login'><FontAwesomeIcon icon={faSignOutAlt} /> Logout</Nav.Link>\r\n                </NavDropdown>\r\n            </Nav>\r\n        </Navbar.Collapse>;\r\n        }else{\r\n            button = <Navbar.Brand><Link to=\"/Login\"> Login </Link> </Navbar.Brand>;\r\n        }\r\n        return (\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n                <Navbar.Brand><Link to=\"/\"> <FontAwesomeIcon icon={faHome} /> Ingenuity</Link></Navbar.Brand>\r\n                <Navbar.Brand><Link to=\"/browse\"> <FontAwesomeIcon icon={faBookReader} /> Browse</Link></Navbar.Brand>\r\n                {/* <Navbar.Brand><Link to=\"/About\"> About </Link></Navbar.Brand>\r\n                <Navbar.Brand><Link to=\"/GithubUsers\"> Users </Link> </Navbar.Brand> */}\r\n                {/* <Form inline>\r\n                        <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                        <Button variant=\"outline-success\">Search</Button>\r\n                </Form> */}\r\n                <SearchComponent></SearchComponent>\r\n                <Navbar.Brand>\r\n                    <OverlayTrigger\r\n                        key=\"bottom\"\r\n                        placement=\"bottom\"\r\n                        overlay={\r\n                            <Tooltip>\r\n                                <strong>Notifications</strong>\r\n                            </Tooltip>\r\n                        }>\r\n                        {/* <Button variant=\"secondary\">Tooltip on {placement}</Button> */}\r\n                        <FontAwesomeIcon icon={faBell}/>\r\n                    </OverlayTrigger>\r\n                </Navbar.Brand>\r\n                {button}\r\n            </Navbar>\r\n        );\r\n    };\r\n};\r\n\r\nexport default NavigationBar;\r\n","import React from \"react\";\r\n\r\nclass Footer extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"fixed-bottom footer\">\r\n        <footer className=\"page-footer font-small blue\">\r\n          <div className=\"footer-copyright text-center py-3\">\r\n            © 2020 Copyright:&nbsp;\r\n            <a\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              href=\"https://persistent.com/\"\r\n            >\r\n              Persistent.com\r\n            </a>\r\n          </div>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","//Github Usernames : gaearon, sophiebits, sebmarkbage, bvaughn\r\n\r\nimport React, { Suspense, lazy } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport NavigationBar from \"./components/NavigationBar\";\r\nimport Footer from \"./components/Footer\";\r\n\r\nconst Home = lazy(() => import(\"./components/Home\"));\r\nconst About = lazy(() => import(\"./components/About\"));\r\nconst LoginComponent = lazy(() => import(\"./components/loginComponent\"));\r\nconst GithubUsers = lazy(() => import(\"./components/GithubUsers\"));\r\nconst BrowseCourses = lazy(() => import(\"./components/BrowseCourses\"));\r\nconst History = lazy(() => import(\"./components/History\"));\r\nconst Profile = lazy(() => import(\"./components/profile\"));\r\nconst Video = lazy(() => import(\"./components/Video\"));\r\nconst LoginCallback = lazy(() => import(\"./components/LoginCallback\"));\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    isLoggedIn: true,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Router>\r\n          <NavigationBar isLoggedIn={this.state.isLoggedIn}></NavigationBar>\r\n          <Container fluid=\"md\" style={{ backgroundColor: \"azure\" }}>\r\n            <Row>\r\n              <Col>\r\n                <Suspense fallback={<div>Loading...</div>}>\r\n                  <Switch>\r\n                    <Route exact path=\"/\" component={Home} />\r\n                    <Route path=\"/about\" component={About} />\r\n                    <Route path=\"/login\" component={LoginComponent} />\r\n                    <Route path=\"/oauth_callback\" component={LoginCallback} />\r\n                    <Route path=\"/githubusers\" component={GithubUsers} />\r\n                    <Route path=\"/profile\" component={Profile} />\r\n                    <Route path=\"/browse\" component={BrowseCourses} />\r\n                    <Route path=\"/history\" component={History} />\r\n                    <Route path=\"/video/:id\" component={Video} />\r\n                  </Switch>\r\n                </Suspense>\r\n              </Col>\r\n            </Row>\r\n            <Row></Row>\r\n          </Container>\r\n          <Footer></Footer>\r\n          {/* <div className=\"container-fluid\">\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Switch>\r\n                <Route exact path=\"/\" component={Home} />\r\n                <Route path=\"/about\" component={About} />\r\n                <Route path=\"/login\" component={LoginComponent} />\r\n                <Route path=\"/githubusers\" component={GithubUsers} />\r\n                <Route path=\"/profile\" component={Profile} />\r\n                <Route path=\"/browse\" component={BrowseCourses} />\r\n                <Route path=\"/history\" component={History} />\r\n              </Switch>\r\n            </Suspense>\r\n          </div> */}\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './App.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}